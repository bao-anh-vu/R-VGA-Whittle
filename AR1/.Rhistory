source('C:/Users/vubao/Desktop/VB_example.R')
exp_grad_L
params
hist(theta_mat[1, ])
hist(theta_mat[2, ])
hist(theta_mat[3, ])
source('C:/Users/vubao/Desktop/VB_example.R')
exp_grad_L
test
use_fisher_info
source('C:/Users/vubao/Desktop/VB_example.R')
exp_grad_L
test
source('C:/Users/vubao/Desktop/VB_example.R')
hist(theta_mat[1, ])
hist(theta_mat[2, ])
hist(theta_mat[3, ])
exp_grad_L
mu_vals
B_vals
d_vals
use_fisher_info
source('C:/Users/vubao/Desktop/VB_example.R')
source('C:/Users/vubao/Desktop/VB_example.R')
hist(theta_mat[1, ])
hist(theta_mat[2, ])
hist(theta_mat[3, ])
params
exp_grad_L
learn_rate * exp_grad_L
hist(theta_mat[1, ])
z
B
source('C:/Users/vubao/Desktop/VB_example.R')
likelihood_n
plot(likelihood_n)
source('C:/Users/vubao/Desktop/VB_example.R')
exp_grad_L
params
source('C:/Users/vubao/Desktop/VB_example.R')
log_likelihood_0
log_prior_0
log_q_0
control_var
exp_grad_L
source('C:/Users/vubao/Desktop/VB_example.R')
exp_grad_L
use_control_var
params
exp_grad_L
B
likelihood
log_likelihood_0
exp(log_likelihood)
1.25^2
source('C:/Users/vubao/Desktop/VB_example2.R')
hist(theta_mat[1, ])
hist(theta_mat[2, ])
hist(theta_mat[3, ])
source('C:/Users/vubao/Desktop/VB_example2.R')
log_likelihood_0
source('C:/Users/vubao/Desktop/VB_example2.R')
log_prior_0
source('C:/Users/vubao/Desktop/VB_example2.R')
control_var
hist(theta_mat[1, ])
hist(theta_mat[2, ])
hist(theta_mat[3, ])
exp_grad_L
params
hist(theta_mat[1, ])
hist(theta_mat[2, ])
hist(theta_mat[3, ])
source('C:/Users/vubao/Desktop/VB_example2.R')
sigma
source('C:/Users/vubao/Desktop/VB_example2.R')
log_likelihood_0
control_var
exp_grad_L
source('C:/Users/vubao/Desktop/VB_example2.R')
exp(0.5)
exp(0.5) / (1 + exp(0.5))
exp(2)
exp(1.2)
source('C:/Users/vubao/Desktop/VB_example2.R')
phi
theta[1]
exp(0) / (1+ exp(0))
exp(0.5) / (1+ exp(0.5))
theta[1]
exp(theta[1])
e^0.085
exp(0.085)
source('C:/Users/vubao/Desktop/VB_example2.R')
phi
sigma2
tau2
test_phi <- c()
test_tau2 <- c()
test_sigma2 <- c()
for (k in 1:n_theta) {
theta <- theta_mat[, k] # (phi, sigma, tau)
test_phi[k] <- exp(theta[1]) / (1 + exp(theta[1]))
test_sigma2[k] <- exp(theta[2])
test_tau2[k] <- exp(theta[3])
}
source('C:/Users/vubao/Desktop/VB_example2.R')
hist(test_phi)
hist(test_sigma)
hist(test_sigma2)
hist(test_tau2)
source('C:/Users/vubao/Desktop/VB_example2.R')
hist(test_phi)
hist(test_sigma2)
hist(test_tau2)
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
log_likelihood_0
source('C:/Users/vubao/Desktop/VB_example2.R')
plot(x_true, type = "l")
lines(enkf.means[[1]], col = "red")
lines(enkf.means[[1]], col = "blue")
lines(enkf.means[[2]], col = "red")
lines(enkf.means[[3]], col = "cyan")
source('C:/Users/vubao/Desktop/VB_example2.R')
plot(x_true, type = "l")
lines(enkf.means[[3]], col = "cyan")
lines(enkf.means[[2]], col = "blue")
lines(enkf.means[[1]], col = "red")
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
log_prior_0
control_var
grad_log_q_0
var(grad_log_q_0[p, ])
source('C:/Users/vubao/Desktop/VB_example2.R')
exp_grad_L
params
params
params
exp_grad_L
params
mu_vals
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
mu_vals
source('C:/Users/vubao/Desktop/VB_example2.R')
print(mu_vals)
log(phi_true / (1-phi_true))
log(sigma_true)
log(tau_true)
source('C:/Users/vubao/Desktop/VB_example2.R')
source('C:/Users/vubao/Desktop/VB_example2.R')
source("compute_likelihood.R")
?svm
#Q1
data(iris)
library(e1071)
?svm
?plot.svm
?svm
library(e1071)
?svm
?is.integer
?head
175 + 93 + 22 + 208
id <- 1:498
baseline <- c(rep("Normal", 175 + 93), rep("Overweight", 22 + 208)
twentyyears <- c(rep("Normal", 175), rep("Overweight", 93),
rep("Normal", 22), rep("Overweight", 208))
id <- 1:498
baseline <- c(rep("Normal", 175 + 93), rep("Overweight", 22 + 208))
twentyyears <- c(rep("Normal", 175), rep("Overweight", 93),
rep("Normal", 22), rep("Overweight", 208))
df <- data.frame(id = id, baseline = baseline, twentyyears = twentyyears)
head(df)
?write.csv
getwd()
write.csv(file = "proportion.csv")
write.csv(df, file = "proportion.csv")
write.csv(df, file = "proportion.csv", row.names = F)
source('~/.active-rstudio-document')
install.packages("fields")
dpois(2, lambda = 2.75)
dpois(0, lambda = 2.75) + dpois(1, lambda = 2.75)
dpois(0, lambda = 2.75)
dpois(1, lambda = 2.75)
1 - dpois(0, lambda = 2.75) + dpois(1, lambda = 2.75)
1 - dpois(0, lambda = 2.75) - dpois(1, lambda = 2.75)
(1+5+15+28)/16
x <- 1:4
px <- c(1,3,5,7)/16
px
crossprod(x, px)
sum(x*px)
mean <- sum(x*px)
var <- (x - mean)^2 * px
var
sum(var)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
R.Version()
install.packages(c("StanHeaders","rstan"),type="source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
## 1. Initialise the variational mean and covariance
beta_0 <- rep(0, length(beta))
install.packages(c("StanHeaders","rstan"),type="source")
example(stan_model, package = "rstan", run.dontrun = TRUE)
# library("parallel")
library("rstan")
Sys.getenv("BINPREF")
install.packages(c("StanHeaders","rstan"),type="source")
# library("parallel")
library("rstan")
Sys.getenv("BINPREF")
install.packages(c("StanHeaders","rstan"),type="source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
Sys.getenv("BINPREF")
install.packages(c("StanHeaders","rstan"),type="source")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
plot(Re(fourier_transf))
plot(Re(fourier_transf), type = "l")
lines(Re(J), col = "red")
plot(Re(fourier_transf)[1:499], type = "l")
lines(Re(J), col = "red")
lines(Re(J) * sqrt(2*pi), col = "red")
plot(Re(fourier_transf)[1:499], type = "l")
lines(Re(J) * sqrt(2*pi), col = "red")
I_omega
plot(I)
plot(I, type = "l")
lines(I_omega, col = "red")
## Calculate the Whittle likelihood
test <- log(spectral_dens) + I_omega[k >= 1 & k <= floor((n-1)/2)]/spectral_dens
length(I_omega[k >= 1 & k <= floor((n-1)/2)])
k >= 1 & k <= floor((n-1)/2)
length(I_omega)
length(I)
k
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
log_whittle
log_whittle2
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
log_whittle2
log_whittle
k
I_omega[k >= 1 & k <= floor((n-1)/2)]
plot(I_omega[k >= 1 & k <= floor((n-1)/2)] - I)
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
log_whittle
log_whittle2
## Alternatively hand-calculate the DFT of the time series:
J <- c()
for (freq in 1:length(freq_in_likelihood)) {
omega_k <- freq_in_likelihood[freq]
# summand <- sapply(1:n, function(t) x[t] * exp(-1i * omega_k * t))
# J[freq] <- 1/sqrt(2*pi) * sum(summand)
summand <- sapply(1:n, function(t) x[t] * exp(-1i * omega_k * t))
J[freq] <- sum(summand)
}
I <- 1/n * Mod(J)
test2 <- log(spectral_dens) + I/spectral_dens
log_whittle2 <- - sum(test2)
log_whittle2
library(stats)
## Generate AR(1) series
x0 <- 1
phi <- 0.9
sigma_e <- 0.5
n <- 1000
x <- c()
x[1] <- x0
set.seed(2023)
for (t in 2:n) {
x[t] <- phi * x[t-1] + rnorm(1, 0, sigma_e)
}
plot(x, type = "l")
library(stats)
## Generate AR(1) series
x0 <- 1
phi <- 0.9
sigma_e <- 0.5
n <- 1000
x <- c()
x[1] <- x0
set.seed(2023)
for (t in 2:n) {
x[t] <- phi * x[t-1] + rnorm(1, 0, sigma_e)
}
plot(x, type = "l")
## next calculate the spectral density of an AR(1)
k <- seq(-ceiling(n/2)+1, floor(n/2), 1)
frequencies <- 2 * pi * k / n
freq_in_likelihood <- frequencies[k >= 1 & k <= floor((n-1)/2)]
spectral_dens <- sigma_e^2 / (1 + phi^2 - 2 * phi * cos(2*pi*freq_in_likelihood))
## Fourier transform of the series
fourier_transf <- fft(x)
I_omega <- 1/n * Mod(fourier_transf)
## Alternatively hand-calculate the DFT of the time series:
J <- c()
for (freq in 1:length(freq_in_likelihood)) {
omega_k <- freq_in_likelihood[freq]
# summand <- sapply(1:n, function(t) x[t] * exp(-1i * omega_k * t))
# J[freq] <- 1/sqrt(2*pi) * sum(summand)
summand <- sapply(1:n, function(t) x[t] * exp(-1i * omega_k * t))
J[freq] <- sum(summand)
}
I <- 1/n * Mod(J)
## Calculate the Whittle likelihood
test <- log(spectral_dens) + I_omega[k >= 1 & k <= floor((n-1)/2)]/spectral_dens
log_whittle <- - sum(test)
log_whittle
test2 <- log(spectral_dens) + I/spectral_dens
log_whittle2 <- - sum(test2)
log_whittle2
## Alternatively hand-calculate the DFT of the time series:
J <- c()
for (freq in 1:length(freq_in_likelihood)) {
omega_k <- freq_in_likelihood[freq]
# summand <- sapply(1:n, function(t) x[t] * exp(-1i * omega_k * t))
# J[freq] <- 1/sqrt(2*pi) * sum(summand)
summand <- sapply(1:n, function(t) x[t] * exp(-1i * omega_k * (t-1)))
J[freq] <- sum(summand)
}
I <- 1/n * Mod(J)
test2 <- log(spectral_dens) + I/spectral_dens
log_whittle2 <- - sum(test2)
log_whittle2
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
log_whittle
log_whittle2
plot(I_omega[k >= 1 & k <= floor((n-1)/2)] - I)
?fft
head(I_omega[k >= 1 & k <= floor((n-1)/2)])
head(I)
I_omega
## next calculate the spectral density of an AR(1)
k <- seq(-ceiling(n/2)+1, floor(n/2), 1)
## next calculate the spectral density of an AR(1)
k <- seq(-ceiling(n/2)+1, floor(n/2), 1)
k_in_likelihood <- k[k >= 1 & k <= floor((n-1)/2)]
head(l)
head(k)
head(k_in_likelihood)
freq_in_likelihood2 <- 2 * pi * k_in_likelihood / n
freq_in_likelihood2 - freq_in_likelihood
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
log_whittle
log_whittle2
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
log_whittle2
log_whittle
## Prior:
theta <- rnorm(10000, 0, 10)
phi_samples <- tanh(theta)
## Prior:
theta <- rnorm(10000, 0, 10)
phi_samples <- tanh(theta)
hist(phi_samples)
test <- sort(phi_samples)
head(test)
## Prior:
theta <- rnorm(10000, 0, 1)
phi_samples <- tanh(theta)
hist(phi_samples)
phi_samples2 <- exp(-theta) / (1 + exp(-theta))
hist(phi_samples2)
phi_samples2 <- exp(theta) / (1 + exp(theta))
hist(phi_samples2)
## Prior:
theta <- rnorm(10000, 0, 1)
phi_samples <- tanh(theta)
phi_samples2 <- exp(theta) / (1 + exp(theta))
hist(phi_samples)
hist(phi_samples2)
tanh(0)
tanh(1)
## Initial theta:
theta_0 <- 1
## Compute initial likelihood
log_likelihood_curr <- calculate_whittle_likelihood(time_series = x,
phi = tanh(theta_0),
sigma_e = sigma_e)
calculate_whittle_likelihood <- function(time_series, phi, sigma_e) {
n <- length(time_series)
## Calculate the spectral density of an AR(1)
k <- seq(-ceiling(n/2)+1, floor(n/2), 1)
k_in_likelihood <- k[k >= 1 & k <= floor((n-1)/2)]
freq_in_likelihood <- 2 * pi * k_in_likelihood / n
spectral_dens <- sigma_e^2 / (1 + phi^2 - 2 * phi * cos(2*pi*freq_in_likelihood))
## Fourier transform of the series
fourier_transf <- fft(x)
I_omega <- 1/n * Mod(fourier_transf)
## Calculate the Whittle likelihood
test <- log(spectral_dens) + I_omega[k_in_likelihood + 1]/spectral_dens ## have to adjust the indices by 1 because the fft() indices start from 0 but we only want the frequencies starting from k = 1
log_whittle <- - sum(test)
log_whittle
return(log_whittle)
}
## Initial theta:
theta_0 <- 1
## Compute initial likelihood
log_likelihood_curr <- calculate_whittle_likelihood(time_series = x,
phi = tanh(theta_0),
sigma_e = sigma_e)
log_likelihood_curr
## Compute initial prior
log_prior_curr <- dnorm(theta_0, prior_mean, sqrt(prior_var))
## Prior: theta = tanh^-1(phi), theta ~ N(0,1)
prior_mean <- 0
prior_var <- 1
theta <- rnorm(10000, prior_mean, sqrt(prior_var))
phi_samples <- tanh(theta)
hist(phi_samples)
## Initial theta:
theta_0 <- 1
## Compute initial likelihood
log_likelihood_curr <- calculate_whittle_likelihood(time_series = x,
phi = tanh(theta_0),
sigma_e = sigma_e)
## Compute initial prior
log_prior_curr <- dnorm(theta_0, prior_mean, sqrt(prior_var))
## Compute initial prior
log_prior_curr <- dnorm(theta_0, prior_mean, sqrt(prior_var), log = T)
log_prior_curr
## Initial theta:
theta_0 <- 1
theta_curr <- theta_0
## Compute initial likelihood
log_likelihood_curr <- calculate_whittle_likelihood(time_series = x,
phi = tanh(theta_curr),
sigma_e = sigma_e)
## Compute initial prior
log_prior_curr <- dnorm(theta_0, prior_mean, sqrt(prior_var), log = T)
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
plot(post_samples, type = "l")
post_samples[1]
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
plot(post_samples, type = "l")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
plot(post_samples, type = "l")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
scale
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
plot(post_samples, type = "l")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
plot(post_samples, type = "l")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
tanh(theta_0)
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
## Test whittle likelihood
phi_grid <- seq(0.01, 0.99, length.out = 1000)
whittle_llh <- c()
for (p in 1:length(phi_grid)) {
whittle_llh[p] <- calculate_whittle_likelihood(time_series = x, phi = phi_grid[p], sigma_e = sigma_e)
}
plot(whittle_likelihood)
plot(whittle_llh, type = "l")
plot(phi_grid, whittle_llh, type = "l")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
## Test by comparing with the usual likelihood (use KF or EnKF here)
calculate_ar1_likelihood <- function(time_series, phi, sigma_e) {
log_likelihood <- c()
log_likelihood[1] <- dnorm(x[1], 0, sqrt(sigma_e^2 / (1 - phi^2)), log = T) # assume x1 ~ U[-10, 10]
for (t in 2:n) {
log_likelihood <- log_likelihood + dnorm(x[t], phi * x[t-1], sigma_e, log = T)
}
return(log_likelihood)
}
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
abline(v = phi, col = "red", lty = 2)
plot(phi_grid, whittle_llh, type = "l")
abline(v = phi, col = "red", lty = 2)
plot(phi_grid, whittle_llh, type = "l", main = "Whittle likelihood")
abline(v = phi, col = "red", lty = 2)
plot(phi_grid, normal_llh, type = "l", main = "Normal likelihood")
abline(v = phi, col = "red", lty = 2)
par(mfrow = c(2,1))
plot(phi_grid, whittle_llh, type = "l", main = "Whittle likelihood")
abline(v = phi, col = "red", lty = 2)
plot(phi_grid, normal_llh, type = "l", main = "Normal likelihood")
abline(v = phi, col = "red", lty = 2)
par(mfrow = c(1, 2))
plot(phi_grid, whittle_llh, type = "l", main = "Whittle likelihood")
abline(v = phi, col = "red", lty = 2)
plot(phi_grid, normal_llh, type = "l", main = "Normal likelihood")
abline(v = phi, col = "red", lty = 2)
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
source("C:/Users/vubao/Dropbox/Uni/PhD/Literature review/Statistical methods/R-VGA/R-VGA-whittle/rvga-whittle.R")
sessionIngo()
sessionInfo()
source("~/PhD/R-VGA-whittle/AR1/mcmc_whittle.R")
getwd()
setwd(~/PhD/R-VGA-whittle/AR1)
setwd("C:/Users/vubao/Documents/PhD/R-VGA-whittle/AR1/")
source("~/PhD/R-VGA-whittle/AR1/mcmc_whittle.R")
